Paraphrased version:

# 2-matrix_divided.txt

==============================
How to Use 2-matrix_divided.py
==============================

This module provides a function called "matrix_divided(matrix, div)" for performing division on matrices.

Usage
=====

The "matrix_divided(...)" function returns a new matrix that is a copy of the "matrix" parameter with all elements divided by "div".

Example:
```python
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [3, 6, 9],
...     [12, 15, 18]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
```

It's important to note that the quotients are rounded to a maximum of two decimal places.

Example:
```python
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
```

The original matrix remains unchanged.

Example:
```python
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]
```

The function can handle both integers and floating-point numbers.

Example:
```python
>>> matrix = [
...     [1.1, -2.2, 3.3],
...     [4.4, 5.5, -6.6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]
```

It is also possible to combine integers and floats in the matrix.

Example:
```python
>>> matrix = [
...     [1, -2.2, 3, 4.4, 5],
...     [-6.6, 7.00, 8, 9.999, 10]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]
```

Invalid Matrices
==============

The "matrix" parameter must be a list of lists containing either integers or floats. If "matrix" is not a list, a TypeError is raised.

Examples:
```python
>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
TypeError: matrix must be a matrix (list of lists) of integers/floats
```

An empty list will also result in a TypeError.

Examples:
```python
>>> matrix = []
>>> print(matrix_divided(matrix, 3))
TypeError: matrix must be a matrix (list of lists) of integers/floats
```

However, an empty list of lists will not raise an error.

Example:
```python
>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]
```

Similarly, if "matrix" is not specifically a list of lists, a TypeError will be raised.

Example:
```python
>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
TypeError: matrix must be a matrix (list of lists) of integers/floats
```

The same TypeError will occur if any elements in "matrix" are not integers or floats.

Example:
```python
>>> matrix = [
...     [1, 2, 3],
...     [4, "not a number", 6]
... ]
>>> print(matrix_divided(matrix, 3))
TypeError: matrix must be a matrix (list of lists) of integers/floats
```

Lastly, all rows in the matrix must have the same size. If any rows are of different sizes, a TypeError will be raised.

Example:
```python
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7]
... ]
>>> print(matrix_divided(matrix, 3))
TypeError: Each row of the matrix must have the same size
```

Invalid Divisors
================

The "div" parameter must be either an integer or a float. Otherwise, a TypeError will be raised.

Examples:
```python
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "not a number"))
TypeError: div must be a number

>>> print(matrix_divided(matrix, None))
TypeError: div must be a number
```

Additionally, the "div" value must be non-zero. Otherwise, a ZeroDivisionError will be raised.

Example:
```python
>>> print(matrix_divided(matrix, 0))
ZeroDivisionError: division by zero
```
